@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Personal_Doctor.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ClinicRepository ClinicRepository
@inject SpecialtyRepository SpecialtyRepository

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Name" class="form-control" aria-required="true" placeholder="Name" />
                <label for="name">Name</label>
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Sex" class="form-control">
                    <option disabled value="">Select sex</option>
                    @foreach (Sex s in Enum.GetValues<Sex>())
                    {
                        <option value="@s">@s</option>
                    }
                </InputSelect>
                <label>Sex</label>
                <ValidationMessage For="() => Input.Sex" />
            </div>
            <!-- Role selection -->
            <label>Роль</label>
            <InputSelect @bind-Value="Input.Role" class="form-control">
                <option value="Patient">Пацієнт</option>
                <option value="Doctor">Лікар</option>
            </InputSelect>

            @if (Input.Role == "Doctor")
            {
                <!-- Clinic -->
                <label>Клініка</label>
                <InputSelect @bind-Value="Input.ClinicId" class="form-control">
                    <option value="">-- Виберіть клініку --</option>
                    @foreach (var clinic in Clinics)
                    {
                        <option value="@clinic.Id">@clinic.Name</option>
                    }
                </InputSelect>

                <!-- Specialties -->
                <label>Спеціальності</label>
                @foreach (var specialty in Specialties)
                {
                    <div>
                        <InputCheckbox @bind-Value="specialtySelections[specialty.Id]" />
                        @specialty.Name
                    </div>
                }
            }
            
            
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private List<Clinic> Clinics = new();
    private List<Specialty> Specialties = new();
    private Dictionary<int, bool> specialtySelections = new();

    protected override async Task OnInitializedAsync()
    {
        Clinics = await ClinicRepository.GetAllAsync();
        Specialties = await SpecialtyRepository.GetAllAsync();

        // Заповнити словник checkbox'ів
        foreach (var specialty in Specialties)
        {
            specialtySelections[specialty.Id] = false;
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        if (Input.Role == "Doctor")
        {
            // Валідація клініки
            if (Input.ClinicId == null)
            {
                // Можна використати кастомну помилку або ValidationMessageStore
                return;
            }

            // Вибрати спеціальності
            Input.SelectedSpecialtyIds = specialtySelections
                .Where(s => s.Value)
                .Select(s => s.Key)
                .ToList();

            if (!Input.SelectedSpecialtyIds.Any())
            {
                return; // Мінімум 1 спеціальність
            }
        }

        var user = new ApplicationUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                Sex = Input.Sex!.Value,
                Name = Input.Name
            };

        if (Input.Role == "Doctor")
        {
            user.ClinicId = Input.ClinicId;
            user.Specialties = Specialties
                .Where(s => Input.SelectedSpecialtyIds.Contains(s.Id))
                .ToList();
        }

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            await UserManager.AddToRoleAsync(user, Input.Role);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Name")]
        public string Name { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Sex")]
        public Sex? Sex { get; set; }

        [Required]
        public string Role { get; set; } = "Patient"; // Default role

        // Optional for Doctors
        public int? ClinicId { get; set; }

        public List<int> SelectedSpecialtyIds { get; set; } = new();
    }
}
