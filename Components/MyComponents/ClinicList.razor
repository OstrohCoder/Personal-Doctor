@using Personal_Doctor.Data
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject ClinicRepository ClinicRepository
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.Forms

<h3>Клініки</h3>

<input class="form-control mb-3" @bind="searchTerm" placeholder="Пошук за назвою..." />

@foreach (var clinic in FilteredClinics)
{
    <div class="d-flex align-items-center">
        <ClinicListItem Clinic="clinic" />
        @if (IsAdmin)
        {
            <input type="radio" name="selectedClinic" class="form-check-input ms-auto me-3"
                   @onchange="() => SelectClinic(clinic)" checked="@IsSelected(clinic)" />
        }
    </div>
}

@if (IsAdmin)
{
    <hr />
    <h5>@(selectedClinic == null ? "Додати клініку" : "Редагувати клініку")</h5>
    <EditForm Model="clinicFormModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Назва:</label>
            <InputText class="form-control" @bind-Value="clinicFormModel.Name" />
        </div>
        <div class="mb-2">
            <label>Адреса:</label>
            <InputText class="form-control" @bind-Value="clinicFormModel.Address" />
        </div>
        <div class="mb-2">
            <label>Фото:</label>
            <InputFile OnChange="OnImageChanged" />
            @if (!string.IsNullOrEmpty(previewImage))
            {
                <img src="@previewImage" class="mt-2" style="width: 100px;" />
            }
        </div>
        <div class="btn-group mt-2">
            <button class="btn btn-primary" type="submit">@((selectedClinic == null) ? "Додати" : "Оновити")</button>
            <button class="btn btn-danger" type="button" @onclick="HandleDelete">Видалити</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public List<Clinic> Clinics { get; set; }

    private string searchTerm = "";
    private bool IsAdmin;
    private Clinic selectedClinic;
    private Clinic clinicFormModel = new Clinic();
    private string previewImage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        IsAdmin = authState.User.IsInRole("Admin");
    }

    private IEnumerable<Clinic> FilteredClinics =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? Clinics
            : Clinics.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void SelectClinic(Clinic clinic)
    {
        selectedClinic = clinic;
        clinicFormModel = new Clinic
            {
                Id = clinic.Id,
                Name = clinic.Name,
                Address = clinic.Address,
                Picture = clinic.Picture
            };

        previewImage = GetImageSource(clinic.Picture);
    }

    private bool IsSelected(Clinic clinic) => selectedClinic?.Id == clinic.Id;

    private async Task OnImageChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        clinicFormModel.Picture = ms.ToArray();
        previewImage = GetImageSource(clinicFormModel.Picture);
    }

    private async Task HandleSubmit()
    {
        if (selectedClinic == null)
        {
            await ClinicRepository.AddAsync(clinicFormModel);
            Clinics.Add(clinicFormModel);
        }
        else
        {
            await ClinicRepository.UpdateAsync(clinicFormModel);
            var index = Clinics.FindIndex(c => c.Id == selectedClinic.Id);
            if (index >= 0)
                Clinics[index] = clinicFormModel;
            selectedClinic = null;
        }

        clinicFormModel = new Clinic();
        previewImage = null;
    }

    private async Task HandleDelete()
    {
        if (selectedClinic == null)
        {
            await ShowMessage("Виберіть клініку для видалення.");
            return;
        }

        await ClinicRepository.DeleteAsync(selectedClinic);
        Clinics.RemoveAll(c => c.Id == selectedClinic.Id);
        selectedClinic = null;
        clinicFormModel = new Clinic();
        previewImage = null;
    }

    private string GetImageSource(byte[] picture)
    {
        if (picture == null || picture.Length == 0)
            return "/img/clinic-avatar-default.svg";

        var base64 = Convert.ToBase64String(picture);
        return $"data:image/png;base64,{base64}";
    }

    private Task ShowMessage(string message)
    {
        // Реалізуй повідомлення через JS interop, ToastService або просте alert
        Console.WriteLine(message);
        return Task.CompletedTask;
    }
}

