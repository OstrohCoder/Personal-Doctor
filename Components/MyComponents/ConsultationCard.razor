// MyComponents/ConsultationCard.razor
@using Microsoft.AspNetCore.Components.Authorization
@using Personal_Doctor.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ConsultationRepository ConsultationRepository

@code {
    [Parameter] public Consultation Consultation { get; set; } = default!;

    private string? CurrentUserRole;
    private string? CurrentUserId;

    private bool ShowRating => CurrentUserRole == "Patient" && ConsultationIsOver;
    private bool ShowRatingReadOnly => CurrentUserRole == "Doctor" && Consultation.Rating.HasValue;
    private bool ConsultationIsOver => DateTime.Now > GetDateTime(Consultation.DayDate, Consultation.EndTime);

    private int HoveredRating = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUserId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            CurrentUserRole = user.IsInRole("Patient") ? "Patient" : user.IsInRole("Doctor") ? "Doctor" : null;
        }
    }

    private async Task SetRating(byte value)
    {
        if (CurrentUserRole == "Patient" && ConsultationIsOver)
        {
            Consultation.Rating = value;
            await ConsultationRepository.UpdateAsync(Consultation);
        }
    }

    private DateTime GetDateTime(DateOnly date, TimeOnly time)
    {
        return date.ToDateTime(time);
    }

    private string GetCardBackground() => Consultation.Patient == null ? "bg-warning-subtle" : "bg-light";

    private string FormatPrice(float price) => price.ToString("F2");

    private string GetImageSrc(byte[] imageData)
    {
        return imageData != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}" : "";
    }
}

<div class="card p-3 mb-3 @GetCardBackground()">
    <div class="d-flex align-items-center mb-2">
        @if (CurrentUserRole == "Patient")
        {
            <img src="@GetImageSrc(Consultation.Doctor.Picture)" alt="Doctor" class="rounded-circle me-2" width="50" height="50" />
            <strong>@Consultation.Doctor.Name</strong>
        }
        else if (CurrentUserRole == "Doctor" && Consultation.Patient is not null)
        {
            <img src="@GetImageSrc(Consultation.Patient.Picture)" alt="Patient" class="rounded-circle me-2" width="50" height="50" />
            <strong>@Consultation.Patient.Name</strong>
        }
    </div>

    <div>
        <span><strong>Дата:</strong> @Consultation.DayDate</span><br />
        <span><strong>Час:</strong> @Consultation.BeginningTime - @Consultation.EndTime</span><br />
        <span><strong>Ціна:</strong> @FormatPrice(Consultation.Price) грн</span>
    </div>

    @if (ShowRating)
    {
        <div class="mt-2">
            @for (int i = 1; i <= 5; i++)
            {
                <span class="fa fa-star @(i <= (HoveredRating > 0 ? HoveredRating : Consultation.Rating ?? 0) ? "text-warning" : "text-secondary")"
                      style="cursor: pointer; font-size: 1.5em"
                      @onmouseover="() => HoveredRating = i"
                      @onmouseout="() => HoveredRating = 0"
                      @onclick="() => SetRating((byte)i)">
                </span>
            }
        </div>
    }
    else if (ShowRatingReadOnly)
    {
        <div class="mt-2">
            @for (int i = 1; i <= 5; i++)
            {
                <span class="fa fa-star @(i <= Consultation.Rating ? "text-warning" : "text-secondary")" style="font-size: 1.5em"></span>
            }
        </div>
    }
</div>

// 💡 Не забудь підключити FontAwesome для зірочок або використай власні SVG
// 📂 Помісти цей компонент у папку MyComponents
// 🔧 Підключення: <MyComponents.ConsultationCard Consultation="yourConsultation" />
